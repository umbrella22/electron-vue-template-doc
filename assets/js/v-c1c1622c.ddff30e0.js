"use strict";(self.webpackChunkelectron_vue_template_doc=self.webpackChunkelectron_vue_template_doc||[]).push([[406],{3398:(e,t,a)=>{a.r(t),a.d(t,{data:()=>n});const n={key:"v-c1c1622c",path:"/Overview/advanced/RouteLazyLoading.html",title:"路由懒加载",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"Overview/advanced/RouteLazyLoading.md",git:{updatedTime:1624590844e3}}},7709:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});var n=a(6252);const r=(0,n._)("h1",{id:"路由懒加载",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#路由懒加载","aria-hidden":"true"},"#"),(0,n.Uk)(" 路由懒加载")],-1),l=(0,n.Uk)("当打包构建应用时，js 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。"),o={href:"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html",target:"_blank",rel:"noopener noreferrer"},u=(0,n.Uk)("vue-router官网"),c=(0,n._)("div",{class:"custom-container tip"},[(0,n._)("p",{class:"custom-container-title"},"提示"),(0,n._)("p",null,"如何实现路由的懒加载在这里不做过多的阐述，在vue-router的官方文档中有着非常完美的解释，在这里我们需要说明的是为何在electron中要去实现路由懒加载")],-1),d=(0,n._)("p",null,"首先是为了内存和首屏加载速度问题，即使是在electron中，资源都在用户电脑中并且不用考虑网络传输带来的等待时间，几乎算是非常理想的状态，但是我们需要考虑的是，用户的内存，硬盘读取速度，以及cpu的速度，如果您的页面非常多，这将导致js包非常大，然后在用户的计算机硬件又不是非常理想的状态下，可能会导致首屏加载非常缓慢，即使你添加了等待页面，大于3秒的加载时间也会让用户烦躁不已，所以还是建议启用路由懒加载，这样用户不仅仅只是在首屏等待时间会降低，也有利于electron回收内存，让内存占用不再那么浮夸。",-1),i={render:function(e,t){const a=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.iD)(n.HY,null,[r,(0,n._)("blockquote",null,[(0,n._)("p",null,[l,(0,n._)("a",o,[u,(0,n.Wm)(a)])])]),c,d],64)}}}}]);