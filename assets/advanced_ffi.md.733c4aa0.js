import{_ as s,o as n,c as l,O as a}from"./chunks/framework.26a4e2b8.js";const u=JSON.parse('{"title":"调用 c++原生 dll","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/ffi.md","filePath":"advanced/ffi.md","lastUpdated":1678178891000}'),o={name:"advanced/ffi.md"},e=a(`<h1 id="调用-c-原生-dll" tabindex="-1">调用 c++原生 dll <a class="header-anchor" href="#调用-c-原生-dll" aria-label="Permalink to &quot;调用 c++原生 dll&quot;">​</a></h1><p>通常在很多时候使用 electron 中，我们不止只是使用了前端的一些东西，相对的包括我们可能有些代码不想使用 js 来处理，等种种原因，需要我们去调用 c++写的 dll 库。</p><div class="danger custom-block"><p class="custom-block-title">请注意</p><p>在 electron22 版本以后，electron 官方开启了进程沙盒模式，这将导致 ffi-napi 不可用，如果要使用请注意您的 electron 版本</p></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>安装前，请自行检查您有没有安装以下可能需要用到的依赖：</p><ul><li>全平台 <ul><li>Python v2.7, v3.5, v3.6, v3.7, or v3.8 (并设置了环境变量)</li></ul></li><li>windows 平台 <ul><li><a href="https://www.npmjs.com/package/windows-build-tools/v/2.0.0" target="_blank" rel="noreferrer">windows-build-tools</a></li></ul></li><li>macOS <ul><li>Xcode</li></ul></li><li>linux or unix <ul><li>make</li><li>c/c++编译器工具，例如<a href="https://gcc.gnu.org/" target="_blank" rel="noreferrer">GCC</a></li></ul></li></ul></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ffi-napi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>首先安装 ffi-napi，由于原本的 node-ffi 已经一年没有更新了，导致无法和 electron 的新版本兼容，让很多人在使用它的时候，都只能被迫降级到 4.x，但是又不能享受新版 electron 带来的便利，这个库完美的解决了我们的问题。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>当前项目中并没有附加该依赖，鉴于并不是所有人都会有这个需求。下面内容中将会出现修改 webpack 配置文件以及 package.json 文件来实现正常工作。</p></div><ul><li><p>如何使用？</p><ul><li>首先确保您已经生成正确的 dll 文件；并且已经安装了 ffi-napi。</li><li>在 static 同级目录内创建一个文件夹，名字自取；然后修改<code>config/index.js</code>中的<code>DllFolder</code>对象，它接受字符串类型，是你刚刚创建的文件夹名称。</li><li>然后放置你的 dll 文件到你新创建的文件夹内重启一次，然后就可以按照一下方法进行调用了</li><li>打包前，请去 package.json 文件找到<code>extraFiles</code>数组，并且在内填入你刚刚创建的文件夹名称，同样也是字符串</li></ul></li></ul><h3 id="主进程中使用" tabindex="-1">主进程中使用 <a class="header-anchor" href="#主进程中使用" aria-label="Permalink to &quot;主进程中使用&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 主进程中调用</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ffi </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ffi-napi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dll </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ffi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Library</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">libPath</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/文件名.后缀</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里是c++中对js暴漏的方法，举个例子：</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里是c++中暴漏了一个名为test的方法，它接受两个int类型，返回结果也是int类型</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">[(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)]]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 假设该c++中的方法是相加并抛出结果，那么这里得出的结果应该是4</span></span>
<span class="line"><span style="color:#A6ACCD;">dll</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="渲染进程中使用-无非必要-不推荐" tabindex="-1">渲染进程中使用（无非必要，不推荐） <a class="header-anchor" href="#渲染进程中使用-无非必要-不推荐" aria-label="Permalink to &quot;渲染进程中使用（无非必要，不推荐）&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 渲染进程中调用</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ffi </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ffi-napi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dll </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ffi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Library</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">__lib</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/文件名.后缀</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里是c++中对js暴漏的方法，举个例子：</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里是c++中暴漏了一个名为test的方法，它接受两个int类型，返回结果也是int类型</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">[(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">int</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)]]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 假设该c++中的方法是相加并抛出结果，那么这里得出的结果应该是4</span></span>
<span class="line"><span style="color:#A6ACCD;">dll</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>此处假设我 dll 放置目录的名称叫 lib</p></blockquote><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">extraFiles</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lib</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>__lib</code>是不可被修改，因为本框架已经做了预先处理，所有的<code>__lib</code>均指向你在<code>config/index.js</code>文件中设置的<code>DllFolder</code>值。<code>记住它接受一个字符串</code></p></div><div class="danger custom-block"><p class="custom-block-title">警告</p><p>当您觉得<code>_lib</code>作为 dll 的全局文件夹变量不太好时，您可以去<code>.electron-vue/webpack.renderer.config.js</code>和<code>src/index.ejs</code>中搜索<code>__lib</code>关键词，并将其修改成你所喜欢的即可。但是这是极度不建议的，因为您并不知道这么做所带来的后果，他可能包括但不限于：打包之后 dll 调用失败，dll 位置丢失，dev 无法启动等一系列连锁反应</p></div><ul><li>但开发途中是绝对不会这么一帆风顺的，就我在摸索的时候，遇到的问题总结如下： <ul><li>Q：控制台报错：<code>Uncaught Error: Dynamic Linking Error: Win32 error 126</code></li><li>A：该报错是由于 dll 文件位置不对引起的，文件路径是否和上面一样，否则您需要使用绝对路径。</li><li>Q：控制台报错：<code>Uncaught Error: Dynamic Linking Error: Win32 error 193</code></li><li>A：dll 位数不对导致的，32 位 dll 只能给 32 位程序使用，64 位只能给 64 位程序使用，二者不可混合使用。</li><li>Q：控制台报错：<code>Uncaught Error: Dynamic Linking Error: Win32 error 127</code></li><li>A：该报错是由于在 js 中声明了 c++中没有的方法导致的，请注意 c++中暴漏的函数名；或者是当前 dll 引用了其他资源文件它没有加载成功。</li><li>Q：控制台报错：<code>Uncaught Error: Dynamic Linking Error: Win32 error 1114</code></li><li>A：该报错是在打包时，dll 释放位置错误，导致程序去 c 盘查找后无果得到的 dll 丢失错误。（后面会谈这个打包之后的 dll 问题）</li><li>Q：控制台报错：<code>Uncaught (in promise) Error: \\\\?\\C:\\Users\\%userName%\\Desktop\\electron-vue-template\\node_modules\\ref-napi\\build\\Release\\binding.node is not a valid Win32 application. \\\\?\\C:\\Users\\%userName%\\Desktop\\electron-vue-template\\node_modules\\ref-napi\\build\\Release\\binding.node</code></li><li>A：这种错误通常出现在你打包过一次之后发生，此时你只需要去你的 node_modules/ffi-napi 文件夹内重新执行一次 npm install 或者 yarn install 即可解决。</li></ul></li></ul>`,17),p=[e];function c(t,r,i,D,y,d){return n(),l("div",null,p)}const C=s(o,[["render",c]]);export{u as __pageData,C as default};
